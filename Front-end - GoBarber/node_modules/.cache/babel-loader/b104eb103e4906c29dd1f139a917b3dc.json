{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSuccess, signFailure } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const response = yield call(api.post, '/sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n\n    if (!user.provider) {\n      toast.error('Usuário  não é prestador');\n      return;\n    }\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação! Por favor, verfique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = payload;\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro! Por favor, verifique seus dados!');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/home/the-one-who-knoccks/Documents/GoBarber - Master/Front-end - GoBarber/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","history","api","signInSuccess","signFailure","signIn","payload","email","password","response","post","token","user","data","provider","error","defaults","headers","Authorization","push","err","signUp","name","setToken","auth","signOut"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAAyC,oBAAzC;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,WAAzC;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAA4B;AACjC,MAAI;AACF,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAoBF,OAA1B;AAEA,UAAMG,QAAQ,GAAG,MAAMZ,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,WAAX,EAAwB;AACjDH,MAAAA,KADiD;AAEjDC,MAAAA;AAFiD,KAAxB,CAA3B;AAKA,UAAM;AAACG,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgBH,QAAQ,CAACI,IAA/B;;AAEA,QAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBd,MAAAA,KAAK,CAACe,KAAN,CAAY,0BAAZ;AACA;AACD;;AAEDb,IAAAA,GAAG,CAACc,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASP,KAAM,EAArD;AAEA,UAAMb,GAAG,CAACK,aAAa,CAACQ,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAX,IAAAA,OAAO,CAACkB,IAAR,CAAa,YAAb;AACD,GApBD,CAoBE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,uDAAZ;AACA,UAAMjB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUiB,MAAV,CAAiB;AAACf,EAAAA;AAAD,CAAjB,EAA4B;AACjC,MAAI;AACF,UAAM;AAACgB,MAAAA,IAAD;AAAOf,MAAAA,KAAP;AAAcC,MAAAA;AAAd,QAA0BF,OAAhC;AACA,UAAMT,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,OAAX,EAAoB;AAC5BY,MAAAA,IAD4B;AAE5Bf,MAAAA,KAF4B;AAG5BC,MAAAA,QAH4B;AAI5BM,MAAAA,QAAQ,EAAE;AAJkB,KAApB,CAAV;AAOAb,IAAAA,OAAO,CAACkB,IAAR,CAAa,GAAb;AACD,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,qDAAZ;AAEA,UAAMjB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASmB,QAAT,CAAkB;AAACjB,EAAAA;AAAD,CAAlB,EAA6B;AAClC,MAAI,CAACA,OAAL,EAAc;AAEd,QAAM;AAACK,IAAAA;AAAD,MAAUL,OAAO,CAACkB,IAAxB;;AAEA,MAAIb,KAAJ,EAAW;AACTT,IAAAA,GAAG,CAACc,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASP,KAAM,EAArD;AACD;AACF;AAED,OAAO,SAASc,OAAT,GAAmB;AACxBxB,EAAAA,OAAO,CAACkB,IAAR,CAAa,GAAb;AACD;AAED,eAAepB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB2B,QAAtB,CADO,EAEjB3B,UAAU,CAAC,uBAAD,EAA0BS,MAA1B,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0ByB,MAA1B,CAHO,EAIjBzB,UAAU,CAAC,gBAAD,EAAmB6B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import {takeLatest, call, put, all} from 'redux-saga/effects';\nimport {toast} from 'react-toastify';\n\nimport history from '~/services/history';\nimport api from '~/services/api';\n\nimport {signInSuccess, signFailure} from './actions';\n\nexport function* signIn({payload}) {\n  try {\n    const {email, password} = payload;\n\n    const response = yield call(api.post, '/sessions', {\n      email,\n      password,\n    });\n\n    const {token, user} = response.data;\n\n    if (!user.provider) {\n      toast.error('Usuário  não é prestador');\n      return;\n    }\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    yield put(signInSuccess(token, user));\n\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação! Por favor, verfique seus dados');\n    yield put(signFailure());\n  }\n}\n\nexport function* signUp({payload}) {\n  try {\n    const {name, email, password} = payload;\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true,\n    });\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro! Por favor, verifique seus dados!');\n\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({payload}) {\n  if (!payload) return;\n\n  const {token} = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}