{"ast":null,"code":"import tzParseTimezone from '../_lib/tzParseTimezone';\nimport subMilliseconds from 'date-fns/esm/subMilliseconds';\nimport toDate from '../toDate';\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\n\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options); // This date has the UTC time values of the input date at the system time zone\n\n  var utcDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()); // We just need to apply the offset indicated by the time zone to this localized date\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, date);\n  return offsetMilliseconds ? subMilliseconds(utcDate, offsetMilliseconds) : utcDate;\n}","map":{"version":3,"sources":["/home/the-one-who-knoccks/Documents/GoBarber - Master/14 - Front-end - GoBarber/gobarber/node_modules/date-fns-tz/esm/utcToZonedTime/index.js"],"names":["tzParseTimezone","subMilliseconds","toDate","utcToZonedTime","dirtyDate","timeZone","options","date","utcDate","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","offsetMilliseconds"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,OAA7C,EAAsD;AACnE,MAAIC,IAAI,GAAGL,MAAM,CAACE,SAAD,EAAYE,OAAZ,CAAjB,CADmE,CAGnE;;AACA,MAAIE,OAAO,GAAG,IAAIC,IAAJ,CACZF,IAAI,CAACG,cAAL,EADY,EAEZH,IAAI,CAACI,WAAL,EAFY,EAGZJ,IAAI,CAACK,UAAL,EAHY,EAIZL,IAAI,CAACM,WAAL,EAJY,EAKZN,IAAI,CAACO,aAAL,EALY,EAMZP,IAAI,CAACQ,aAAL,EANY,EAOZR,IAAI,CAACS,kBAAL,EAPY,CAAd,CAJmE,CAanE;;AACA,MAAIC,kBAAkB,GAAGjB,eAAe,CAACK,QAAD,EAAWE,IAAX,CAAxC;AAEA,SAAOU,kBAAkB,GACrBhB,eAAe,CAACO,OAAD,EAAUS,kBAAV,CADM,GAErBT,OAFJ;AAGD","sourcesContent":["import tzParseTimezone from '../_lib/tzParseTimezone'\nimport subMilliseconds from 'date-fns/esm/subMilliseconds'\nimport toDate from '../toDate'\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options)\n\n  // This date has the UTC time values of the input date at the system time zone\n  var utcDate = new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds(),\n    date.getUTCMilliseconds()\n  )\n  // We just need to apply the offset indicated by the time zone to this localized date\n  var offsetMilliseconds = tzParseTimezone(timeZone, date)\n\n  return offsetMilliseconds\n    ? subMilliseconds(utcDate, offsetMilliseconds)\n    : utcDate\n}\n"]},"metadata":{},"sourceType":"module"}