{"ast":null,"code":"var _jsxFileName = \"/home/the-one-who-knoccks/Documents/GoBarber - Master/14 - Front-end - GoBarber/gobarber/src/pages/Dashboard/index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, setMilliseconds, isBefore, isEqual, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      const {\n        appointments\n      } = response.data;\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setMilliseconds(setSeconds(setMinutes(setHours(date, hour), 0), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: appointments.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDate() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDate() {\n    setDate(addDays(date, 1));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlePrevDate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(MdChevronLeft, {\n    size: 36,\n    color: \"#FFF\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, dateFormatted), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleNextDate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(MdChevronRight, {\n    size: 36,\n    color: \"#FFF\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["/home/the-one-who-knoccks/Documents/GoBarber - Master/14 - Front-end - GoBarber/gobarber/src/pages/Dashboard/index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","setMilliseconds","isBefore","isEqual","parseISO","utcToZonedTime","pt","MdChevronLeft","MdChevronRight","api","Container","Time","range","Dashboard","schedule","setSchedule","date","setDate","Date","dateFormatted","locale","loadSchedule","response","get","params","appointments","data","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","map","hour","checkDate","compareDate","time","past","appointment","find","a","handlePrevDate","handleNextDate","user","name"],"mappings":"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","sourcesContent":["import React, {useState, useMemo, useEffect} from 'react';\nimport {\n  format,\n  subDays,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  setMilliseconds,\n  isBefore,\n  isEqual,\n  parseISO,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport {MdChevronLeft, MdChevronRight} from 'react-icons/md';\nimport api from '~/services/api';\n\nimport {Container, Time} from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n\n  const dateFormatted = useMemo(\n    () => format(date, \"d 'de' MMMM\", {locale: pt}),\n    [date]\n  );\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {date},\n      });\n\n      const {appointments} = response.data;\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = setMilliseconds(\n          setSeconds(setMinutes(setHours(date, hour), 0), 0),\n          0\n        );\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: appointments.find(a =>\n            isEqual(parseISO(a.date), compareDate)\n          ),\n        };\n      });\n\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDate() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDate() {\n    setDate(addDays(date, 1));\n  }\n\n  return (\n    <Container>\n      <header>\n        <button type=\"button\" onClick={handlePrevDate}>\n          <MdChevronLeft size={36} color=\"#FFF\" />\n        </button>\n        <strong>{dateFormatted}</strong>\n        <button type=\"button\" onClick={handleNextDate}>\n          <MdChevronRight size={36} color=\"#FFF\" />\n        </button>\n      </header>\n\n      <ul>\n        {schedule.map(time => (\n          <Time key={time.time} past={time.past} available={!time.appointment}>\n            <strong>{time.time}</strong>\n            <span>\n              {time.appointment ? time.appointment.user.name : 'Em aberto'}\n            </span>\n          </Time>\n        ))}\n      </ul>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}