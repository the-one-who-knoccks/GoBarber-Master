{"ast":null,"code":"import tzTokenizeDate from '../tzTokenizeDate/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n  timezoneIANA: /(UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nexport default function tzParseTimezone(timezoneString, date) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n    var minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n\n  token = patterns.timezoneIANA.exec(timezoneString);\n\n  if (token) {\n    // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)\n    var tokens = tzTokenizeDate(date, timezoneString);\n    var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3], tokens[4], tokens[5]);\n    var timestampWithMsZeroed = date.getTime() - date.getTime() % 1000;\n    return -(asUTC - timestampWithMsZeroed);\n  }\n\n  return 0;\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/the-one-who-knoccks/Documents/GoBarber - Master/14 - Front-end - GoBarber/gobarber/node_modules/date-fns-tz/esm/_lib/tzParseTimezone/index.js"],"names":["tzTokenizeDate","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneIANA","tzParseTimezone","timezoneString","date","token","absoluteOffset","exec","hours","parseInt","validateTimezone","NaN","minutes","tokens","asUTC","Date","UTC","timestampWithMsZeroed","getTime"],"mappings":"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","sourcesContent":["import tzTokenizeDate from '../tzTokenizeDate/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\n\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n  timezoneIANA: /(UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n}\n\n// Parse various time zone offset formats to an offset in milliseconds\nexport default function tzParseTimezone(timezoneString, date) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  var hours\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n\n    if (!validateTimezone(hours)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n    var minutes = parseInt(token[3], 10)\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN\n    }\n\n    absoluteOffset =\n      hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // IANA time zone\n  token = patterns.timezoneIANA.exec(timezoneString)\n  if (token) {\n    // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)\n    var tokens = tzTokenizeDate(date, timezoneString)\n    var asUTC = Date.UTC(\n      tokens[0],\n      tokens[1] - 1,\n      tokens[2],\n      tokens[3],\n      tokens[4],\n      tokens[5]\n    )\n    var timestampWithMsZeroed = date.getTime() - (date.getTime() % 1000)\n    return -(asUTC - timestampWithMsZeroed)\n  }\n\n  return 0\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}